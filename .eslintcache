[{"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx":"1","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx":"2","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx":"3","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx":"4","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx":"5","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts":"6","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts":"7","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts":"8","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts":"9","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts":"10","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts":"11","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts":"12","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx":"13","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx":"14","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx":"15","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx":"16","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx":"17","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx":"18","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts":"19","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts":"20","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts":"21","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts":"22","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts":"23","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx":"24","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts":"25","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx":"26"},{"size":759,"mtime":1692793702372,"results":"27","hashOfConfig":"28"},{"size":1116,"mtime":1692793702386,"results":"29","hashOfConfig":"28"},{"size":2364,"mtime":1692793721147,"results":"30","hashOfConfig":"28"},{"size":1660,"mtime":1692793702420,"results":"31","hashOfConfig":"28"},{"size":880,"mtime":1692797856729,"results":"32","hashOfConfig":"28"},{"size":1321,"mtime":1692796928536,"results":"33","hashOfConfig":"28"},{"size":119,"mtime":1692793702641,"results":"34","hashOfConfig":"28"},{"size":1564,"mtime":1692793702650,"results":"35","hashOfConfig":"28"},{"size":160,"mtime":1692793702658,"results":"36","hashOfConfig":"28"},{"size":570,"mtime":1692793702663,"results":"37","hashOfConfig":"28"},{"size":139,"mtime":1692667859766,"results":"38","hashOfConfig":"28"},{"size":784,"mtime":1692793702672,"results":"39","hashOfConfig":"28"},{"size":885,"mtime":1692868073452,"results":"40","hashOfConfig":"28"},{"size":5075,"mtime":1692793702518,"results":"41","hashOfConfig":"28"},{"size":10707,"mtime":1692868049259,"results":"42","hashOfConfig":"28"},{"size":6400,"mtime":1692795716848,"results":"43","hashOfConfig":"28"},{"size":6462,"mtime":1692795733416,"results":"44","hashOfConfig":"28"},{"size":5850,"mtime":1692793702627,"results":"45","hashOfConfig":"28"},{"size":101,"mtime":1692793702675,"results":"46","hashOfConfig":"28"},{"size":2720,"mtime":1692793702688,"results":"47","hashOfConfig":"28"},{"size":38,"mtime":1690980344162,"results":"48","hashOfConfig":"28"},{"size":244,"mtime":1692793702655,"results":"49","hashOfConfig":"28"},{"size":322,"mtime":1692793702692,"results":"50","hashOfConfig":"28"},{"size":5154,"mtime":1692796652123,"results":"51","hashOfConfig":"28"},{"size":140,"mtime":1692797056747,"results":"52","hashOfConfig":"28"},{"size":0,"mtime":1692868056438,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oqoa1y",{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx",["136"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport { IActivity } from '../../interfaces/activity.interface';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableActivityColumn } from '../../const/table.const';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  activities: IActivity[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingActivities: boolean;\n}\n\nfunction Activity() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    activities: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingActivities: false,\n  });\n\n  const handleGetActivities = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingActivities: true,\n    }));\n\n    const getActivitiesResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.activities, {});\n\n    const transformedData = getActivitiesResp.data.map((item: IActivity) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n\n      return {\n        key: item._id,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-description': item.description,\n        'item-datetime': dayjs(item.createdAt).format('MMMM DD; h:mm A'),\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      activities: transformedData,\n      isFetchingActivities: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetActivities();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Activity | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableActivityColumn}\n            data={state.activities}\n            loading={state.isFetchingActivities}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Activity;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx",["137"],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx",["138"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableRequestsColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Requests() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: false });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'verify-account', label: 'Verify Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n            ]}\n          />\n        ),\n      };\n      // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Requests | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableRequestsColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Requests;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx",["139"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableUsersColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Users() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: true });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'revoke-account', label: 'Revoke Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n              { value: 'delete-account', label: 'Delete', disabled: true },\n            ]}\n          />\n        ),\n        // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Users | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableUsersColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Users;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx",["140"],[],"import { Row, Checkbox, Card, message } from 'antd';\nimport SwsyaClient from '../../utils/http-client.util';\nimport {\n  ILoginEncryptedPayload,\n  ILoginPayload,\n} from '../../interfaces/login.interface';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useEffect, useState } from 'react';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse, ISavedLogin } from '../../interfaces/api.interface';\nimport { messages } from '../../const/messages.const';\nimport { BtnNotYou, BtnSignIn } from '../../components/btn-signin.component';\nimport LoginFormFields from '../../components/form-signin.component';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../const/api.const';\n\nfunction Login() {\n  const { setValue: setAuthResponse, removeValue: removeAuthResponse } =\n    useLocalStorage<IApiResponse | null>('auth_response', null);\n\n  const {\n    setValue: setSaveLogin,\n    value: getSavedLogin,\n    removeValue: removeSavedLogin,\n  } = useLocalStorage<ISavedLogin | null>('login_token', null);\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    isSavedLogin: true,\n    isLoggingIn: false,\n    isLoginFailed: false,\n  });\n\n  const { handleSubmit, control } = useForm<ILoginPayload>();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const handleLogin: SubmitHandler<ILoginPayload> = async (data) => {\n    if (\n      (data.username === undefined || data.password === undefined) &&\n      !getSavedLogin\n    ) {\n      messageApi.error({\n        type: 'error',\n        content: 'Username and password is required.',\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n    setState((prev) => ({\n      ...prev,\n      isLoggingIn: true,\n    }));\n\n    const payload: ILoginPayload = {\n      username: data.username,\n      password: data.password,\n    };\n\n    let loginResponse = null;\n\n    try {\n      if (getSavedLogin) {\n        loginResponse = await SwsyaClient.post<any, ILoginEncryptedPayload>(\n          API.ecryptedLogin,\n          {\n            content: getSavedLogin.token,\n          }\n        );\n      } else {\n        loginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.login,\n          payload\n        );\n      }\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n      messageApi.error({\n        type: 'error',\n        content: messages['500'].message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    if (loginResponse!.code === '00') {\n      if (state.isSavedLogin && !getSavedLogin) {\n        const encryptLoginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.ecryptLogin,\n          payload\n        );\n        setSaveLogin({\n          owner: encryptLoginResponse.data.data.owner,\n          token: encryptLoginResponse.data.data.token,\n        });\n      }\n      setAuthResponse({\n        code: loginResponse!.code,\n        message: loginResponse!.message,\n        token: loginResponse!.data,\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n\n      navigate('/a/dashboard', { replace: true });\n      return;\n    }\n\n    if (loginResponse!.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: loginResponse!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoggingIn: false,\n        isLoginFailed: true,\n      }));\n      handleClearLocalStorage(); // Clear saved data\n      return;\n    }\n  };\n\n  const handleSaveLogin = () => {\n    setState((prev) => ({ ...prev, isSavedLogin: !state.isSavedLogin }));\n  };\n\n  const handleClearSaveLogin = () => {\n    removeSavedLogin();\n  };\n\n  const handleClearLocalStorage = () => {\n    removeAuthResponse();\n    removeSavedLogin();\n  };\n\n  useEffect(() => {\n    document.title = 'Login | Swerte Saya';\n    removeAuthResponse(); // Remove existing token\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Row justify=\"center\">\n          <form onSubmit={handleSubmit(handleLogin)}>\n            <Card\n              title={`${\n                getSavedLogin\n                  ? `Welcome Back, ${getSavedLogin.owner}!`\n                  : 'Swerte Saya | Login'\n              }`}\n              bordered={true}\n              style={{ width: 280 }}\n            >\n              {getSavedLogin ? (\n                <div>\n                  Your presence is recognized. Would you like to proceed with\n                  signing in?\n                  <BtnSignIn\n                    title={\"Let's go!\"}\n                    isLoading={state.isLoggingIn}\n                  />\n                  <BtnNotYou\n                    event={() => handleClearSaveLogin()}\n                    title={getSavedLogin ? `Not ${getSavedLogin.owner}` : ''}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <LoginFormFields\n                    control={control}\n                    isLoginFailed={state.isLoginFailed}\n                  />\n                  <Checkbox\n                    onChange={() => handleSaveLogin()}\n                    style={{ marginTop: 20 }}\n                    checked={state.isSavedLogin}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <BtnSignIn isLoading={state.isLoggingIn} />\n                </div>\n              )}\n            </Card>\n          </form>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx",[],[],{"ruleId":"141","severity":1,"message":"142","line":159,"column":6,"nodeType":"143","endLine":159,"endColumn":8,"suggestions":"144"},{"ruleId":"141","severity":1,"message":"145","line":291,"column":6,"nodeType":"143","endLine":291,"endColumn":8,"suggestions":"146"},{"ruleId":"141","severity":1,"message":"142","line":208,"column":6,"nodeType":"143","endLine":208,"endColumn":8,"suggestions":"147"},{"ruleId":"141","severity":1,"message":"142","line":209,"column":6,"nodeType":"143","endLine":209,"endColumn":8,"suggestions":"148"},{"ruleId":"141","severity":1,"message":"149","line":155,"column":6,"nodeType":"143","endLine":155,"endColumn":8,"suggestions":"150"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initState'. Either include it or remove the dependency array.","ArrayExpression",["151"],"React Hook useEffect has missing dependencies: 'initState' and 'labels'. Either include them or remove the dependency array.",["152"],["153"],["154"],"React Hook useEffect has a missing dependency: 'removeAuthResponse'. Either include it or remove the dependency array.",["155"],{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"156","fix":"160"},{"desc":"156","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [initState]",{"range":"164","text":"165"},"Update the dependencies array to be: [initState, labels]",{"range":"166","text":"167"},{"range":"168","text":"165"},{"range":"169","text":"165"},"Update the dependencies array to be: [removeAuthResponse]",{"range":"170","text":"171"},[4568,4570],"[initState]",[8512,8514],"[initState, labels]",[5881,5883],[5949,5951],[4104,4106],"[removeAuthResponse]"]