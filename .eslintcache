[{"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx":"1","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx":"2","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx":"3","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx":"4","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx":"5","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts":"6","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts":"7","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts":"8","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts":"9","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts":"10","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts":"11","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts":"12","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx":"13","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx":"14","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx":"15","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx":"16","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx":"17","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx":"18","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts":"19","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts":"20","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts":"21","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts":"22","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts":"23","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx":"24"},{"size":759,"mtime":1692793702372,"results":"25","hashOfConfig":"26"},{"size":1116,"mtime":1692793702386,"results":"27","hashOfConfig":"26"},{"size":2364,"mtime":1692793721147,"results":"28","hashOfConfig":"26"},{"size":1660,"mtime":1692793702420,"results":"29","hashOfConfig":"26"},{"size":650,"mtime":1692793788159,"results":"30","hashOfConfig":"26"},{"size":1333,"mtime":1692793702637,"results":"31","hashOfConfig":"26"},{"size":119,"mtime":1692793702641,"results":"32","hashOfConfig":"26"},{"size":1564,"mtime":1692793702650,"results":"33","hashOfConfig":"26"},{"size":160,"mtime":1692793702658,"results":"34","hashOfConfig":"26"},{"size":570,"mtime":1692793702663,"results":"35","hashOfConfig":"26"},{"size":139,"mtime":1692667859766,"results":"36","hashOfConfig":"26"},{"size":784,"mtime":1692793702672,"results":"37","hashOfConfig":"26"},{"size":906,"mtime":1692793702483,"results":"38","hashOfConfig":"26"},{"size":5075,"mtime":1692793702518,"results":"39","hashOfConfig":"26"},{"size":7252,"mtime":1692793702557,"results":"40","hashOfConfig":"26"},{"size":6383,"mtime":1692793728237,"results":"41","hashOfConfig":"26"},{"size":6448,"mtime":1692793725869,"results":"42","hashOfConfig":"26"},{"size":5850,"mtime":1692793702627,"results":"43","hashOfConfig":"26"},{"size":101,"mtime":1692793702675,"results":"44","hashOfConfig":"26"},{"size":2720,"mtime":1692793702688,"results":"45","hashOfConfig":"26"},{"size":38,"mtime":1690980344162,"results":"46","hashOfConfig":"26"},{"size":244,"mtime":1692793702655,"results":"47","hashOfConfig":"26"},{"size":322,"mtime":1692793702692,"results":"48","hashOfConfig":"26"},{"size":4549,"mtime":1692793702467,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k5boqm",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx",["133"],[],"import React from 'react';\nimport { Input } from 'antd';\nimport { Control, Controller } from 'react-hook-form';\n\ninterface LoginFormFieldsProps {\n  control: Control<any>;\n  isLoginFailed: boolean;\n}\n\nconst LoginFormFields: React.FC<LoginFormFieldsProps> = ({\n  control,\n  isLoginFailed,\n}) => {\n  return (\n    <>\n      <p style={{ padding: 0, color: 'GrayText', fontSize: 12 }}>\n        Username or Email\n      </p>\n      <Controller\n        name=\"username\"\n        control={control}\n        render={({ field }) => (\n          <Input\n            size=\"middle\"\n            placeholder=\"Enter\"\n            status={isLoginFailed ? 'error' : ''}\n            {...field}\n          />\n        )}\n      />\n      <p style={{ padding: 0, color: 'GrayText', fontSize: 12 }}>Password</p>\n      <Controller\n        name=\"password\"\n        control={control}\n        render={({ field }) => (\n          <Input.Password\n            size=\"middle\"\n            placeholder=\"Enter\"\n            status={isLoginFailed ? 'error' : ''}\n            {...field}\n          />\n        )}\n      />\n    </>\n  );\n};\n\nexport default LoginFormFields;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx",["134"],[],"import CountUp from 'react-countup';\nimport { Col, Row, Statistic } from 'antd';\n\ninterface IStatistics {\n  txnTotal: number;\n  txnCount: number;\n  swtTotal: number;\n  stlCount: number;\n  txnRevenue: number;\n}\nconst formatter = (value: any) => (\n  <CountUp end={value} separator=\",\" duration={4} />\n);\n\nconst Statistics = (data: IStatistics) => (\n  <Row style={{ justifyContent: 'space-between' }}>\n    <Row gutter={16}>\n      <Col>\n        <Statistic\n          title=\"Revenue (PHP)\"\n          value={data.txnTotal}\n          formatter={formatter}\n          style={{ background: 'white', padding: '20px', borderRadius: '10px' }}\n        />\n      </Col>\n      <Col>\n        <Statistic\n          title=\"Income (PHP)\"\n          value={data.txnRevenue}\n          formatter={formatter}\n          style={{ background: 'white', padding: '20px', borderRadius: '10px' }}\n        />\n      </Col>\n    </Row>\n    <Row gutter={16}>\n      <Col>\n        <Statistic\n          title=\"Transactions\"\n          value={data.txnCount}\n          formatter={formatter}\n          style={{ background: 'white', padding: '20px', borderRadius: '10px' }}\n        />\n      </Col>\n      <Col>\n        <Statistic\n          title=\"3D Numbers\"\n          value={data.swtTotal}\n          formatter={formatter}\n          style={{ background: 'white', padding: '20px', borderRadius: '10px' }}\n        />\n      </Col>\n      <Col>\n        <Statistic\n          title=\"STL Numbers\"\n          value={data.stlCount}\n          formatter={formatter}\n          style={{ background: 'white', padding: '20px', borderRadius: '10px' }}\n        />\n      </Col>\n    </Row>\n  </Row>\n);\n\nexport default Statistics;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx",["135"],[],"import { Table } from 'antd';\nimport type { ColumnsType, TableProps } from 'antd/es/table';\nimport { TxnTableContent } from '../interfaces/transaction.interface';\n\ninterface ITransactionTable {\n  columns: ColumnsType<TxnTableContent>;\n  data: any[];\n  loading?: boolean;\n}\n\nconst onChange: TableProps<TxnTableContent>['onChange'] = () => {\n};\n\nconst TransactionTable = (args: ITransactionTable) => (\n  <Table\n    size=\"small\"\n    columns={args.columns}\n    dataSource={args.data}\n    onChange={onChange}\n    pagination={{ position: ['bottomCenter'] }}\n    loading={args.loading || false}\n    bordered={true}\n  />\n);\n\nexport default TransactionTable;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts",["136","137","138"],[],"import { useState } from 'react';\n\ninterface LocalStorageHook<T> {\n  value: T | null;\n  setValue: (value: T | null) => void;\n  removeValue: () => void;\n}\n\nconst useLocalStorage = <T>(\n  key: string,\n  initialValue: T | null\n): LocalStorageHook<T> => {\n  // Get the initial value from localStorage or use the provided initialValue\n  const [storedValue, setStoredValue] = useState<T | null>(() => {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? (JSON.parse(item) as T) : initialValue;\n    } catch (error: any) {\n      console.error(\n        `Error while retrieving value for key \"${key}\" from localStorage: ${error.message}`\n      );\n      return initialValue;\n    }\n  });\n\n  // Update the storedValue in localStorage whenever the value changes\n  const setValue = (value: T | null) => {\n    try {\n      if (value === null) {\n        localStorage.removeItem(key);\n      } else {\n        localStorage.setItem(key, JSON.stringify(value));\n      }\n      setStoredValue(value);\n    } catch (error: any) {\n      console.error(\n        `Error while setting value for key \"${key}\" in localStorage: ${error.message}`\n      );\n    }\n  };\n\n  // Function to remove the key-value pair from local storage\n  const removeValue = () => {\n    try {\n      localStorage.removeItem(key);\n      setStoredValue(null);\n    } catch (error: any) {\n      console.error(\n        `Error while removing key \"${key}\" from localStorage: ${error.message}`\n      );\n    }\n  };\n\n  return { value: storedValue, setValue, removeValue };\n};\n\nexport default useLocalStorage;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts",["139","140","141"],[],"export interface IApiResponse<T = any> {\n  message: any;\n  code: any;\n  [key: string]: T;\n}\n\nexport interface ISavedLogin {\n  owner: string;\n  token: string;\n}\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx",["142","143","144","145"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport { IActivity } from '../../interfaces/activity.interface';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableActivityColumn } from '../../const/table.const';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  activities: IActivity[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingActivities: boolean;\n}\n\nfunction Activity() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    activities: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingActivities: false,\n  });\n\n  const handleGetActivities = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingActivities: true,\n    }));\n\n    const getActivitiesResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.activities, {});\n\n    const transformedData = getActivitiesResp.data.map((item: IActivity) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n\n      return {\n        key: item._id,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-description': item.description,\n        'item-datetime': dayjs(item.createdAt).format('MMMM DD; h:mm A'),\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      activities: transformedData,\n      isFetchingActivities: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetActivities();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Activity | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableActivityColumn}\n            data={state.activities}\n            loading={state.isFetchingActivities}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Activity;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx",["146","147","148","149","150","151"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport Statistics from '../../components/stats.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { currency } from '../../utils/converter.util';\nimport {\n  IContentItem,\n  ITransaction,\n} from '../../interfaces/transaction.interface';\nimport { Button, Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeOutlined } from '@ant-design/icons';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableDashboardColumn } from '../../const/table.const';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  transactions: ITransaction[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingTransactions: boolean;\n}\n\nfunction AdminDashboard() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    transactions: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingTransactions: false,\n  });\n\n  const handleGetTransactions = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingTransactions: true,\n    }));\n    const getTransactionsResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.transactions, {});\n\n    //\n    const transformedData = getTransactionsResp.data.map(\n      (item: ITransaction) => {\n        const name = capitalizeName(\n          `${item.profile.firstName} ${item.profile.lastName}`\n        );\n        const reference = item.reference;\n        const combination = item.content\n          .map(\n            (contentItem: IContentItem) =>\n              `${contentItem.type} ${contentItem.number}`\n          )\n          .join(', ');\n        const combinationElement = item.content.map(\n          (contentItem: IContentItem) => {\n            // return <h1>{contentItem.type} {contentItem.number}</h1>\n            const isRambled = contentItem.rambled;\n            return (\n              <div\n                style={{\n                  fontWeight: 'bolder',\n                  marginRight: '10px',\n                  color: isRambled ? 'purple' : 'black',\n                }}\n              >\n                {contentItem.number}\n              </div>\n            );\n          }\n        );\n\n        return {\n          key: item._id,\n          'item-reference': (\n            <Paragraph\n              copyable={{ text: reference }}\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              {reference}\n            </Paragraph>\n          ),\n          'item-game': item.game,\n          'item-teller': (\n            <Paragraph\n              copyable={{ text: name }}\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              {name}\n            </Paragraph>\n          ),\n          'item-combination': (\n            <Paragraph\n              copyable={{ text: combination }}\n              style={{ display: 'flex', padding: '0px', margin: '0px' }}\n            >\n              {combinationElement}\n            </Paragraph>\n          ),\n          'item-time': item.time,\n          'item-schedule': dayjs(item.schedule).format('MMMM DD'),\n          'item-amount': currency.format(\n            item.content.reduce(\n              (total: any, contentItem: any) => total + contentItem.amount,\n              0\n            )\n          ),\n          'item-details': (\n            <Button\n              type=\"dashed\"\n              shape=\"default\"\n              icon={<EyeOutlined />}\n              size={'small'}\n            >\n              View more details\n            </Button>\n          ),\n        };\n      }\n    );\n\n    setState((prev) => ({\n      ...prev,\n      txnRevenue: Number(getTransactionsResp.headers['swsya-txn-revenue']) || 0,\n      stlCount: Number(getTransactionsResp.headers['swsya-stl-count']) || 0,\n      swtCount: Number(getTransactionsResp.headers['swsya-swt-count']) || 0,\n      txnCount: Number(getTransactionsResp.headers['swsya-txn-count']) || 0,\n      txnTotal: Number(getTransactionsResp.headers['swsya-txn-total']) || 0,\n      transactions: transformedData,\n      isFetchingTransactions: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetTransactions();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Dashboard | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px' }}\n        >\n          <Statistics\n            txnRevenue={state.txnRevenue}\n            stlCount={state.stlCount}\n            swtTotal={state.swtCount}\n            txnCount={state.txnCount}\n            txnTotal={state.txnTotal}\n          />\n        </div>\n        <div\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px' }}\n        >\n          <TransactionTable\n            columns={tableDashboardColumn}\n            data={state.transactions}\n            loading={state.isFetchingTransactions}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default AdminDashboard;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx",["152","153","154","155","156","157"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableRequestsColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Requests() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: false });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email;\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'verify-account', label: 'Verify Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n            ]}\n          />\n        ),\n      };\n      // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Users | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableRequestsColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Requests;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx",["158","159","160","161","162","163"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableUsersColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Users() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: true });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email;\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'revoke-account', label: 'Revoke Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n              { value: 'delete-account', label: 'Delete', disabled: true },\n            ]}\n          />\n        ),\n        // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Users | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableUsersColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Users;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx",["164","165","166","167"],[],"import { Row, Checkbox, Card, message } from 'antd';\nimport SwsyaClient from '../../utils/http-client.util';\nimport {\n  ILoginEncryptedPayload,\n  ILoginPayload,\n} from '../../interfaces/login.interface';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useEffect, useState } from 'react';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse, ISavedLogin } from '../../interfaces/api.interface';\nimport { messages } from '../../const/messages.const';\nimport { BtnNotYou, BtnSignIn } from '../../components/btn-signin.component';\nimport LoginFormFields from '../../components/form-signin.component';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../const/api.const';\n\nfunction Login() {\n  const { setValue: setAuthResponse, removeValue: removeAuthResponse } =\n    useLocalStorage<IApiResponse | null>('auth_response', null);\n\n  const {\n    setValue: setSaveLogin,\n    value: getSavedLogin,\n    removeValue: removeSavedLogin,\n  } = useLocalStorage<ISavedLogin | null>('login_token', null);\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    isSavedLogin: true,\n    isLoggingIn: false,\n    isLoginFailed: false,\n  });\n\n  const { handleSubmit, control } = useForm<ILoginPayload>();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const handleLogin: SubmitHandler<ILoginPayload> = async (data) => {\n    if (\n      (data.username === undefined || data.password === undefined) &&\n      !getSavedLogin\n    ) {\n      messageApi.error({\n        type: 'error',\n        content: 'Username and password is required.',\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n    setState((prev) => ({\n      ...prev,\n      isLoggingIn: true,\n    }));\n\n    const payload: ILoginPayload = {\n      username: data.username,\n      password: data.password,\n    };\n\n    let loginResponse = null;\n\n    try {\n      if (getSavedLogin) {\n        loginResponse = await SwsyaClient.post<any, ILoginEncryptedPayload>(\n          API.ecryptedLogin,\n          {\n            content: getSavedLogin.token,\n          }\n        );\n      } else {\n        loginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.login,\n          payload\n        );\n      }\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n      messageApi.error({\n        type: 'error',\n        content: messages['500'].message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    if (loginResponse!.code === '00') {\n      if (state.isSavedLogin && !getSavedLogin) {\n        const encryptLoginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.ecryptLogin,\n          payload\n        );\n        setSaveLogin({\n          owner: encryptLoginResponse.data.data.owner,\n          token: encryptLoginResponse.data.data.token,\n        });\n      }\n      setAuthResponse({\n        code: loginResponse!.code,\n        message: loginResponse!.message,\n        token: loginResponse!.data,\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n\n      navigate('/a/dashboard', { replace: true });\n      return;\n    }\n\n    if (loginResponse!.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: loginResponse!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoggingIn: false,\n        isLoginFailed: true,\n      }));\n      handleClearLocalStorage(); // Clear saved data\n      return;\n    }\n  };\n\n  const handleSaveLogin = () => {\n    setState((prev) => ({ ...prev, isSavedLogin: !state.isSavedLogin }));\n  };\n\n  const handleClearSaveLogin = () => {\n    removeSavedLogin();\n  };\n\n  const handleClearLocalStorage = () => {\n    removeAuthResponse();\n    removeSavedLogin();\n  };\n\n  useEffect(() => {\n    document.title = 'Login | Swerte Saya';\n    removeAuthResponse(); // Remove existing token\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Row justify=\"center\">\n          <form onSubmit={handleSubmit(handleLogin)}>\n            <Card\n              title={`${\n                getSavedLogin\n                  ? `Welcome Back, ${getSavedLogin.owner}!`\n                  : 'Swerte Saya | Login'\n              }`}\n              bordered={true}\n              style={{ width: 280 }}\n            >\n              {getSavedLogin ? (\n                <div>\n                  Your presence is recognized. Would you like to proceed with\n                  signing in?\n                  <BtnSignIn\n                    title={\"Let's go!\"}\n                    isLoading={state.isLoggingIn}\n                  />\n                  <BtnNotYou\n                    event={() => handleClearSaveLogin()}\n                    title={getSavedLogin ? `Not ${getSavedLogin.owner}` : ''}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <LoginFormFields\n                    control={control}\n                    isLoginFailed={state.isLoginFailed}\n                  />\n                  <Checkbox\n                    onChange={() => handleSaveLogin()}\n                    style={{ marginTop: 20 }}\n                    checked={state.isSavedLogin}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <BtnSignIn isLoading={state.isLoggingIn} />\n                </div>\n              )}\n            </Card>\n          </form>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts",["168","169","170","171","172","173","174"],[],"import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { API_BASE_URL } from '../const/api.const';\n\ninterface ApiResponse<T = any, H = any> {\n  message: string;\n  code: string;\n  data?: T;\n  headers?: H;\n  response?: any;\n}\n\ninterface ServerResponse<T> {\n  message: string;\n  code: string;\n  data: T;\n}\n\nclass SwsyaClient {\n  private api: AxiosInstance;\n  private authToken: string | null = null;\n  private config: AxiosRequestConfig = {\n    headers: {\n      from: 'web',\n    },\n  };\n\n  constructor(baseURL: string) {\n    this.api = axios.create({\n      baseURL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  setAuthToken(token: string): this {\n    this.authToken = token;\n    return this;\n  }\n\n  private async performRequest<T>(\n    config: AxiosRequestConfig\n  ): Promise<ApiResponse<T>> {\n    try {\n      if (this.authToken) {\n        config.headers = {\n          ...config.headers,\n          Authorization: `Bearer ${this.authToken}`,\n        };\n      }\n\n      const response: AxiosResponse<ServerResponse<T>> =\n        await this.api.request(config);\n\n      return {\n        message: response.data.message,\n        code: response.data.code,\n        data: (response.data as any) || ('Empty' as any),\n        headers: response.headers,\n      };\n    } catch (error: any) {\n      return {\n        message:\n          error.response.data.message ||\n          'Something went wrong. Plese try again.',\n        code: error.response.data.code || 'Empty',\n      };\n    }\n  }\n\n  async get<T, P>(endpoint: string, params: P): Promise<ApiResponse<T>> {\n    this.config.params = params;\n    this.config.method = 'GET';\n    this.config.url = endpoint;\n\n    return this.performRequest<T>(this.config);\n  }\n\n  async post<T, D>(endpoint: string, data?: D): Promise<ApiResponse<T>> {\n    this.config.method = 'POST';\n    this.config.url = endpoint;\n    this.config.data = data;\n\n    return this.performRequest<T>(this.config);\n  }\n\n  async patch<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\n    this.config.method = 'PATCH';\n    this.config.url = endpoint;\n    this.config.data = data;\n\n    return this.performRequest<T>(this.config);\n  }\n\n  async put<T, D>(endpoint: string, data?: D): Promise<ApiResponse<T>> {\n    this.config.method = 'PUT';\n    this.config.url = endpoint;\n    this.config.data = data;\n\n    return this.performRequest<T>(this.config);\n  }\n\n  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {\n    this.config.method = 'DELETE';\n    this.config.url = endpoint;\n\n    return this.performRequest<T>(this.config);\n  }\n}\n\nconst swsyaClient = new SwsyaClient(API_BASE_URL);\nexport default swsyaClient;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx",[],[],{"ruleId":"175","severity":2,"message":"176","line":6,"column":20,"nodeType":"177","messageId":"178","endLine":6,"endColumn":23,"suggestions":"179"},{"ruleId":"175","severity":2,"message":"176","line":11,"column":27,"nodeType":"177","messageId":"178","endLine":11,"endColumn":30,"suggestions":"180"},{"ruleId":"175","severity":2,"message":"176","line":7,"column":9,"nodeType":"177","messageId":"178","endLine":7,"endColumn":12,"suggestions":"181"},{"ruleId":"175","severity":2,"message":"176","line":18,"column":21,"nodeType":"177","messageId":"178","endLine":18,"endColumn":24,"suggestions":"182"},{"ruleId":"175","severity":2,"message":"176","line":35,"column":21,"nodeType":"177","messageId":"178","endLine":35,"endColumn":24,"suggestions":"183"},{"ruleId":"175","severity":2,"message":"176","line":47,"column":21,"nodeType":"177","messageId":"178","endLine":47,"endColumn":24,"suggestions":"184"},{"ruleId":"175","severity":2,"message":"176","line":1,"column":35,"nodeType":"177","messageId":"178","endLine":1,"endColumn":38,"suggestions":"185"},{"ruleId":"175","severity":2,"message":"176","line":2,"column":12,"nodeType":"177","messageId":"178","endLine":2,"endColumn":15,"suggestions":"186"},{"ruleId":"175","severity":2,"message":"176","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":12,"suggestions":"187"},{"ruleId":"175","severity":2,"message":"176","line":66,"column":11,"nodeType":"177","messageId":"178","endLine":66,"endColumn":14,"suggestions":"188"},{"ruleId":"175","severity":2,"message":"176","line":119,"column":50,"nodeType":"177","messageId":"178","endLine":119,"endColumn":53,"suggestions":"189"},{"ruleId":"175","severity":2,"message":"176","line":119,"column":55,"nodeType":"177","messageId":"178","endLine":119,"endColumn":58,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":159,"column":6,"nodeType":"193","endLine":159,"endColumn":8,"suggestions":"194"},{"ruleId":"175","severity":2,"message":"176","line":71,"column":11,"nodeType":"177","messageId":"178","endLine":71,"endColumn":14,"suggestions":"195"},{"ruleId":"175","severity":2,"message":"176","line":135,"column":23,"nodeType":"177","messageId":"178","endLine":135,"endColumn":26,"suggestions":"196"},{"ruleId":"175","severity":2,"message":"176","line":135,"column":41,"nodeType":"177","messageId":"178","endLine":135,"endColumn":44,"suggestions":"197"},{"ruleId":"175","severity":2,"message":"176","line":171,"column":50,"nodeType":"177","messageId":"178","endLine":171,"endColumn":53,"suggestions":"198"},{"ruleId":"175","severity":2,"message":"176","line":171,"column":55,"nodeType":"177","messageId":"178","endLine":171,"endColumn":58,"suggestions":"199"},{"ruleId":"191","severity":1,"message":"192","line":210,"column":6,"nodeType":"193","endLine":210,"endColumn":8,"suggestions":"200"},{"ruleId":"175","severity":2,"message":"176","line":56,"column":11,"nodeType":"177","messageId":"178","endLine":56,"endColumn":14,"suggestions":"201"},{"ruleId":"175","severity":2,"message":"176","line":92,"column":11,"nodeType":"177","messageId":"178","endLine":92,"endColumn":14,"suggestions":"202"},{"ruleId":"175","severity":2,"message":"176","line":92,"column":16,"nodeType":"177","messageId":"178","endLine":92,"endColumn":19,"suggestions":"203"},{"ruleId":"175","severity":2,"message":"176","line":169,"column":50,"nodeType":"177","messageId":"178","endLine":169,"endColumn":53,"suggestions":"204"},{"ruleId":"175","severity":2,"message":"176","line":169,"column":55,"nodeType":"177","messageId":"178","endLine":169,"endColumn":58,"suggestions":"205"},{"ruleId":"191","severity":1,"message":"192","line":208,"column":6,"nodeType":"193","endLine":208,"endColumn":8,"suggestions":"206"},{"ruleId":"175","severity":2,"message":"176","line":56,"column":11,"nodeType":"177","messageId":"178","endLine":56,"endColumn":14,"suggestions":"207"},{"ruleId":"175","severity":2,"message":"176","line":92,"column":11,"nodeType":"177","messageId":"178","endLine":92,"endColumn":14,"suggestions":"208"},{"ruleId":"175","severity":2,"message":"176","line":92,"column":16,"nodeType":"177","messageId":"178","endLine":92,"endColumn":19,"suggestions":"209"},{"ruleId":"175","severity":2,"message":"176","line":170,"column":50,"nodeType":"177","messageId":"178","endLine":170,"endColumn":53,"suggestions":"210"},{"ruleId":"175","severity":2,"message":"176","line":170,"column":55,"nodeType":"177","messageId":"178","endLine":170,"endColumn":58,"suggestions":"211"},{"ruleId":"191","severity":1,"message":"192","line":209,"column":6,"nodeType":"193","endLine":209,"endColumn":8,"suggestions":"212"},{"ruleId":"175","severity":2,"message":"176","line":66,"column":48,"nodeType":"177","messageId":"178","endLine":66,"endColumn":51,"suggestions":"213"},{"ruleId":"175","severity":2,"message":"176","line":73,"column":48,"nodeType":"177","messageId":"178","endLine":73,"endColumn":51,"suggestions":"214"},{"ruleId":"175","severity":2,"message":"176","line":97,"column":61,"nodeType":"177","messageId":"178","endLine":97,"endColumn":64,"suggestions":"215"},{"ruleId":"191","severity":1,"message":"216","line":155,"column":6,"nodeType":"193","endLine":155,"endColumn":8,"suggestions":"217"},{"ruleId":"175","severity":2,"message":"176","line":4,"column":27,"nodeType":"177","messageId":"178","endLine":4,"endColumn":30,"suggestions":"218"},{"ruleId":"175","severity":2,"message":"176","line":4,"column":36,"nodeType":"177","messageId":"178","endLine":4,"endColumn":39,"suggestions":"219"},{"ruleId":"175","severity":2,"message":"176","line":9,"column":14,"nodeType":"177","messageId":"178","endLine":9,"endColumn":17,"suggestions":"220"},{"ruleId":"175","severity":2,"message":"176","line":59,"column":33,"nodeType":"177","messageId":"178","endLine":59,"endColumn":36,"suggestions":"221"},{"ruleId":"175","severity":2,"message":"176","line":59,"column":53,"nodeType":"177","messageId":"178","endLine":59,"endColumn":56,"suggestions":"222"},{"ruleId":"175","severity":2,"message":"176","line":62,"column":21,"nodeType":"177","messageId":"178","endLine":62,"endColumn":24,"suggestions":"223"},{"ruleId":"175","severity":2,"message":"176","line":88,"column":43,"nodeType":"177","messageId":"178","endLine":88,"endColumn":46,"suggestions":"224"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["225","226"],["227","228"],["229","230"],["231","232"],["233","234"],["235","236"],["237","238"],["239","240"],["241","242"],["243","244"],["245","246"],["247","248"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initState'. Either include it or remove the dependency array.","ArrayExpression",["249"],["250","251"],["252","253"],["254","255"],["256","257"],["258","259"],["260"],["261","262"],["263","264"],["265","266"],["267","268"],["269","270"],["271"],["272","273"],["274","275"],["276","277"],["278","279"],["280","281"],["282"],["283","284"],["285","286"],["287","288"],"React Hook useEffect has a missing dependency: 'removeAuthResponse'. Either include it or remove the dependency array.",["289"],["290","291"],["292","293"],["294","295"],["296","297"],["298","299"],["300","301"],["302","303"],{"messageId":"304","fix":"305","desc":"306"},{"messageId":"307","fix":"308","desc":"309"},{"messageId":"304","fix":"310","desc":"306"},{"messageId":"307","fix":"311","desc":"309"},{"messageId":"304","fix":"312","desc":"306"},{"messageId":"307","fix":"313","desc":"309"},{"messageId":"304","fix":"314","desc":"306"},{"messageId":"307","fix":"315","desc":"309"},{"messageId":"304","fix":"316","desc":"306"},{"messageId":"307","fix":"317","desc":"309"},{"messageId":"304","fix":"318","desc":"306"},{"messageId":"307","fix":"319","desc":"309"},{"messageId":"304","fix":"320","desc":"306"},{"messageId":"307","fix":"321","desc":"309"},{"messageId":"304","fix":"322","desc":"306"},{"messageId":"307","fix":"323","desc":"309"},{"messageId":"304","fix":"324","desc":"306"},{"messageId":"307","fix":"325","desc":"309"},{"messageId":"304","fix":"326","desc":"306"},{"messageId":"307","fix":"327","desc":"309"},{"messageId":"304","fix":"328","desc":"306"},{"messageId":"307","fix":"329","desc":"309"},{"messageId":"304","fix":"330","desc":"306"},{"messageId":"307","fix":"331","desc":"309"},{"desc":"332","fix":"333"},{"messageId":"304","fix":"334","desc":"306"},{"messageId":"307","fix":"335","desc":"309"},{"messageId":"304","fix":"336","desc":"306"},{"messageId":"307","fix":"337","desc":"309"},{"messageId":"304","fix":"338","desc":"306"},{"messageId":"307","fix":"339","desc":"309"},{"messageId":"304","fix":"340","desc":"306"},{"messageId":"307","fix":"341","desc":"309"},{"messageId":"304","fix":"342","desc":"306"},{"messageId":"307","fix":"343","desc":"309"},{"desc":"332","fix":"344"},{"messageId":"304","fix":"345","desc":"306"},{"messageId":"307","fix":"346","desc":"309"},{"messageId":"304","fix":"347","desc":"306"},{"messageId":"307","fix":"348","desc":"309"},{"messageId":"304","fix":"349","desc":"306"},{"messageId":"307","fix":"350","desc":"309"},{"messageId":"304","fix":"351","desc":"306"},{"messageId":"307","fix":"352","desc":"309"},{"messageId":"304","fix":"353","desc":"306"},{"messageId":"307","fix":"354","desc":"309"},{"desc":"332","fix":"355"},{"messageId":"304","fix":"356","desc":"306"},{"messageId":"307","fix":"357","desc":"309"},{"messageId":"304","fix":"358","desc":"306"},{"messageId":"307","fix":"359","desc":"309"},{"messageId":"304","fix":"360","desc":"306"},{"messageId":"307","fix":"361","desc":"309"},{"messageId":"304","fix":"362","desc":"306"},{"messageId":"307","fix":"363","desc":"309"},{"messageId":"304","fix":"364","desc":"306"},{"messageId":"307","fix":"365","desc":"309"},{"desc":"332","fix":"366"},{"messageId":"304","fix":"367","desc":"306"},{"messageId":"307","fix":"368","desc":"309"},{"messageId":"304","fix":"369","desc":"306"},{"messageId":"307","fix":"370","desc":"309"},{"messageId":"304","fix":"371","desc":"306"},{"messageId":"307","fix":"372","desc":"309"},{"desc":"373","fix":"374"},{"messageId":"304","fix":"375","desc":"306"},{"messageId":"307","fix":"376","desc":"309"},{"messageId":"304","fix":"377","desc":"306"},{"messageId":"307","fix":"378","desc":"309"},{"messageId":"304","fix":"379","desc":"306"},{"messageId":"307","fix":"380","desc":"309"},{"messageId":"304","fix":"381","desc":"306"},{"messageId":"307","fix":"382","desc":"309"},{"messageId":"304","fix":"383","desc":"306"},{"messageId":"307","fix":"384","desc":"309"},{"messageId":"304","fix":"385","desc":"306"},{"messageId":"307","fix":"386","desc":"309"},{"messageId":"304","fix":"387","desc":"306"},{"messageId":"307","fix":"388","desc":"309"},"suggestUnknown",{"range":"389","text":"390"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"391","text":"392"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"393","text":"390"},{"range":"394","text":"392"},{"range":"395","text":"390"},{"range":"396","text":"392"},{"range":"397","text":"390"},{"range":"398","text":"392"},{"range":"399","text":"390"},{"range":"400","text":"392"},{"range":"401","text":"390"},{"range":"402","text":"392"},{"range":"403","text":"390"},{"range":"404","text":"392"},{"range":"405","text":"390"},{"range":"406","text":"392"},{"range":"407","text":"390"},{"range":"408","text":"392"},{"range":"409","text":"390"},{"range":"410","text":"392"},{"range":"411","text":"390"},{"range":"412","text":"392"},{"range":"413","text":"390"},{"range":"414","text":"392"},"Update the dependencies array to be: [initState]",{"range":"415","text":"416"},{"range":"417","text":"390"},{"range":"418","text":"392"},{"range":"419","text":"390"},{"range":"420","text":"392"},{"range":"421","text":"390"},{"range":"422","text":"392"},{"range":"423","text":"390"},{"range":"424","text":"392"},{"range":"425","text":"390"},{"range":"426","text":"392"},{"range":"427","text":"416"},{"range":"428","text":"390"},{"range":"429","text":"392"},{"range":"430","text":"390"},{"range":"431","text":"392"},{"range":"432","text":"390"},{"range":"433","text":"392"},{"range":"434","text":"390"},{"range":"435","text":"392"},{"range":"436","text":"390"},{"range":"437","text":"392"},{"range":"438","text":"416"},{"range":"439","text":"390"},{"range":"440","text":"392"},{"range":"441","text":"390"},{"range":"442","text":"392"},{"range":"443","text":"390"},{"range":"444","text":"392"},{"range":"445","text":"390"},{"range":"446","text":"392"},{"range":"447","text":"390"},{"range":"448","text":"392"},{"range":"449","text":"416"},{"range":"450","text":"390"},{"range":"451","text":"392"},{"range":"452","text":"390"},{"range":"453","text":"392"},{"range":"454","text":"390"},{"range":"455","text":"392"},"Update the dependencies array to be: [removeAuthResponse]",{"range":"456","text":"457"},{"range":"458","text":"390"},{"range":"459","text":"392"},{"range":"460","text":"390"},{"range":"461","text":"392"},{"range":"462","text":"390"},{"range":"463","text":"392"},{"range":"464","text":"390"},{"range":"465","text":"392"},{"range":"466","text":"390"},{"range":"467","text":"392"},{"range":"468","text":"390"},{"range":"469","text":"392"},{"range":"470","text":"390"},{"range":"471","text":"392"},[165,168],"unknown",[165,168],"never",[236,239],[236,239],[243,246],[243,246],[533,536],[533,536],[1021,1024],[1021,1024],[1343,1346],[1343,1346],[34,37],[34,37],[52,55],[52,55],[65,68],[65,68],[2071,2074],[2071,2074],[3567,3570],[3567,3570],[3572,3575],[3572,3575],[4568,4570],"[initState]",[2290,2293],[2290,2293],[4323,4326],[4323,4326],[4341,4344],[4341,4344],[5442,5445],[5442,5445],[5447,5450],[5447,5450],[6434,6436],[1826,1829],[1826,1829],[2578,2581],[2578,2581],[2583,2586],[2583,2586],[4883,4886],[4883,4886],[4888,4891],[4888,4891],[5864,5866],[1820,1823],[1820,1823],[2572,2575],[2572,2575],[2577,2580],[2577,2580],[4954,4957],[4954,4957],[4959,4962],[4959,4962],[5935,5937],[2010,2013],[2010,2013],[2208,2211],[2208,2211],[2752,2755],[2752,2755],[4104,4106],"[removeAuthResponse]",[159,162],[159,162],[168,171],[168,171],[250,253],[250,253],[1272,1275],[1272,1275],[1292,1295],[1292,1295],[1362,1365],[1362,1365],[2054,2057],[2054,2057]]