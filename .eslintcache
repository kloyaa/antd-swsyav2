[{"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx":"1","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx":"2","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx":"3","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx":"4","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx":"5","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts":"6","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts":"7","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts":"8","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts":"9","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts":"10","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts":"11","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts":"12","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx":"13","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx":"14","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx":"15","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx":"16","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx":"17","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx":"18","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts":"19","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts":"20","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts":"21","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts":"22","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts":"23","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx":"24","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts":"25","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx":"26","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\records.page.tsx":"27"},{"size":759,"mtime":1692793702372,"results":"28","hashOfConfig":"29"},{"size":1116,"mtime":1692793702386,"results":"30","hashOfConfig":"29"},{"size":2364,"mtime":1692793721147,"results":"31","hashOfConfig":"29"},{"size":1712,"mtime":1692877449843,"results":"32","hashOfConfig":"29"},{"size":880,"mtime":1692797856729,"results":"33","hashOfConfig":"29"},{"size":1387,"mtime":1692876864088,"results":"34","hashOfConfig":"29"},{"size":119,"mtime":1692793702641,"results":"35","hashOfConfig":"29"},{"size":1564,"mtime":1692793702650,"results":"36","hashOfConfig":"29"},{"size":160,"mtime":1692793702658,"results":"37","hashOfConfig":"29"},{"size":570,"mtime":1692793702663,"results":"38","hashOfConfig":"29"},{"size":139,"mtime":1692667859766,"results":"39","hashOfConfig":"29"},{"size":784,"mtime":1692793702672,"results":"40","hashOfConfig":"29"},{"size":1017,"mtime":1692876504831,"results":"41","hashOfConfig":"29"},{"size":5075,"mtime":1692793702518,"results":"42","hashOfConfig":"29"},{"size":10749,"mtime":1692876294941,"results":"43","hashOfConfig":"29"},{"size":6400,"mtime":1692795716848,"results":"44","hashOfConfig":"29"},{"size":6957,"mtime":1692876908318,"results":"45","hashOfConfig":"29"},{"size":5850,"mtime":1692793702627,"results":"46","hashOfConfig":"29"},{"size":101,"mtime":1692793702675,"results":"47","hashOfConfig":"29"},{"size":2720,"mtime":1692793702688,"results":"48","hashOfConfig":"29"},{"size":38,"mtime":1690980344162,"results":"49","hashOfConfig":"29"},{"size":244,"mtime":1692793702655,"results":"50","hashOfConfig":"29"},{"size":322,"mtime":1692793702692,"results":"51","hashOfConfig":"29"},{"size":5174,"mtime":1692876187310,"results":"52","hashOfConfig":"29"},{"size":140,"mtime":1692797056747,"results":"53","hashOfConfig":"29"},{"size":0,"mtime":1692868056438,"results":"54","hashOfConfig":"29"},{"size":12178,"mtime":1692882355631,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oqoa1y",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx",["142"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport { IActivity } from '../../interfaces/activity.interface';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableActivityColumn } from '../../const/table.const';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  activities: IActivity[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingActivities: boolean;\n}\n\nfunction Activity() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    activities: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingActivities: false,\n  });\n\n  const handleGetActivities = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingActivities: true,\n    }));\n\n    const getActivitiesResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.activities, {});\n\n    const transformedData = getActivitiesResp.data.map((item: IActivity) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n\n      return {\n        key: item._id,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-description': item.description,\n        'item-datetime': dayjs(item.createdAt).format('MMMM DD; h:mm A'),\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      activities: transformedData,\n      isFetchingActivities: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetActivities();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Activity | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableActivityColumn}\n            data={state.activities}\n            loading={state.isFetchingActivities}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Activity;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx",["143"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport Statistics from '../../components/stats.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { currency } from '../../utils/converter.util';\nimport {\n  IContentItem,\n  ITransaction,\n} from '../../interfaces/transaction.interface';\nimport { Button, Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { EyeOutlined } from '@ant-design/icons';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableDashboardColumn, tableResultsColumn } from '../../const/table.const';\nimport { IDailyResult } from '../../interfaces/bet.interface';\nimport { Line } from 'react-chartjs-2';\nimport { faker } from '@faker-js/faker';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  transactions: ITransaction[];\n  dailyResults: IDailyResult[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingTransactions: boolean;\n  isFetchingDailyResults: boolean;\n}\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction AdminDashboard() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    transactions: [],\n    dailyResults: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingTransactions: false,\n    isFetchingDailyResults: false\n  });\n\n  const handleGetTransactions = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingTransactions: true,\n    }));\n    const getTransactionsResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.transactions, {});\n\n    //\n    const transformedData = getTransactionsResp.data.map(\n      (item: ITransaction) => {\n        const name = capitalizeName(\n          `${item.profile.firstName} ${item.profile.lastName}`\n        );\n        const reference = item.reference;\n        const combination = item.content\n          .map(\n            (contentItem: IContentItem) =>\n              `${contentItem.type} ${contentItem.number}`\n          )\n          .join(', ');\n        const combinationElement = item.content.map(\n          (contentItem: IContentItem, index: number) => {\n            // return <h1>{contentItem.type} {contentItem.number}</h1>\n            const isRambled = contentItem.rambled;\n            return (\n              <div\n                key={index}\n                style={{\n                  fontWeight: 'bolder',\n                  marginRight: '10px',\n                  color: isRambled ? 'purple' : 'black',\n                }}\n              >\n                {contentItem.number}\n              </div>\n            );\n          }\n        );\n        return {\n          key: item._id,\n          'item-reference': (\n            <Paragraph\n              copyable={{ text: reference }}\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              {reference}\n            </Paragraph>\n          ),\n          'item-game': item.game,\n          'item-teller': (\n            <Paragraph\n              copyable={{ text: name }}\n              style={{ padding: '0px', margin: '0px' }}\n            >\n              {name}\n            </Paragraph>\n          ),\n          'item-combination': (\n            <Paragraph\n              copyable={{ text: combination }}\n              style={{ display: 'flex', padding: '0px', margin: '0px' }}\n            >\n              {combinationElement}\n            </Paragraph>\n          ),\n          'item-time': item.time,\n          'item-schedule': dayjs(item.schedule).format('MMMM DD'),\n          'item-amount': currency.format(\n            item.content.reduce(\n              (total: any, contentItem: any) => total + contentItem.amount,\n              0\n            )\n          ),\n          'item-details': (\n            <Button\n              type=\"dashed\"\n              shape=\"default\"\n              icon={<EyeOutlined />}\n              size={'small'}\n              style={{ fontSize: \"12px\" }}\n            >\n              VIEW MORE DETAILS\n            </Button>\n          ),\n        };\n      }\n    );\n\n    setState((prev) => ({\n      ...prev,\n      txnRevenue: Number(getTransactionsResp.headers['swsya-txn-revenue']) || 0,\n      stlCount: Number(getTransactionsResp.headers['swsya-stl-count']) || 0,\n      swtCount: Number(getTransactionsResp.headers['swsya-swt-count']) || 0,\n      txnCount: Number(getTransactionsResp.headers['swsya-txn-count']) || 0,\n      txnTotal: Number(getTransactionsResp.headers['swsya-txn-total']) || 0,\n      transactions: transformedData,\n      isFetchingTransactions: false,\n    }));\n  };\n\n  const handleGetDailyResults = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingDailyResults: true,\n    }));\n\n    const getDailyResultsResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.dailyResults, {});\n\n\n    const mappedData = getDailyResultsResp.data.map((result: IDailyResult) => ({\n      'key': `${result.time}${result.schedule}`,\n      'item-game': result.type,\n      'item-number': result.number,\n      'item-time': result.time,\n      'item-wins': result.wins.toString(),\n    }));\n    \n    setState((prev) => ({\n      ...prev,\n      dailyResults: mappedData,\n      isFetchingDailyResults: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetTransactions();\n      await handleGetDailyResults();\n    }\n  };\n\n\n  const labels = [\n    'January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December'\n  ];\n  const data = {\n    labels,\n    datasets: [\n      {\n        label: 'Revenue',\n        data: labels.map(() => faker.number.int({ min: 0, max: 55000 })),\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\n        borderWidth: 1,\n      },\n      {\n        label: 'Income',\n        data: labels.map(() => faker.number.int({ min: 0, max: 55000 })),\n        borderColor: '#321580',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  useEffect(() => {\n    document.title = 'Dashboard | Swerte Saya';\n    initState();\n\n    console.log(labels.map(() => faker.number.int({ min: -1000, max: 1000 })))\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px' }}\n        >\n          <Statistics\n            txnRevenue={state.txnRevenue}\n            stlCount={state.stlCount}\n            swtTotal={state.swtCount}\n            txnCount={state.txnCount}\n            txnTotal={state.txnTotal}\n          />\n        </div>\n        <div\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px', display: \"flex\", gap: \"20px\" }}\n        >\n          <div style={{width: \"20%\"}}>\n            <TransactionTable\n              columns={tableResultsColumn}\n              data={state.dailyResults}\n              loading={state.isFetchingDailyResults}\n              caption={\"Daily Results\"}\n            />\n          </div>\n\n          <div style={{width: \"80%\"}}>\n            <div style={{ backgroundColor: \"white\", borderRadius: \"20px\", border: \"0.5px solid #f5f5f5\" }}>\n            <Line options={{\n                responsive: true,\n                layout: {\n                  padding: {\n                    left: 20, \n                    right: 20,\n                    bottom: 10,\n                    top: 10\n                  },\n                },\n                animations: {\n                  tension: {\n                    duration: 1000,\n                    easing: 'linear',\n                    from: 1,\n                    to: 0,\n                    loop: true\n                  }\n                },\n                plugins: {\n                  legend: {\n                    position: 'top' as const,\n                  },\n                },\n              }} \n              data={data}  \n              height={\"50vh\"}/>\n            </div>\n            <div style={{ marginTop: \"20px\" }}>\n              <TransactionTable\n                columns={tableDashboardColumn}\n                data={state.transactions}\n                loading={state.isFetchingTransactions}\n                caption={\"Transactions\"}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default AdminDashboard;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx",["144"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableRequestsColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Requests() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: false });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'verify-account', label: 'Verify Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n            ]}\n          />\n        ),\n      };\n      // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Requests | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableRequestsColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Requests;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx",["145"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Button, Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableUsersColumn } from '../../const/table.const';\nimport { EyeOutlined } from '@ant-design/icons';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Users() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: true });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-records': (\n          <Button\n            type=\"dashed\"\n            shape=\"default\"\n            icon={<EyeOutlined />}\n            size={'small'}\n            style={{ fontSize: \"12px\" }}\n            onClick={() => navigate(\"/a/users/record\", { state: {\n              client: { \n                user: item._id,\n                name\n              }\n            }})}\n          >\n            VIEW\n          </Button>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'revoke-account', label: 'Revoke Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n              { value: 'delete-account', label: 'Delete', disabled: true },\n            ]}\n          />\n        ),\n        // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Users | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableUsersColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Users;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx",["146"],[],"import { Row, Checkbox, Card, message } from 'antd';\nimport SwsyaClient from '../../utils/http-client.util';\nimport {\n  ILoginEncryptedPayload,\n  ILoginPayload,\n} from '../../interfaces/login.interface';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useEffect, useState } from 'react';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse, ISavedLogin } from '../../interfaces/api.interface';\nimport { messages } from '../../const/messages.const';\nimport { BtnNotYou, BtnSignIn } from '../../components/btn-signin.component';\nimport LoginFormFields from '../../components/form-signin.component';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../const/api.const';\n\nfunction Login() {\n  const { setValue: setAuthResponse, removeValue: removeAuthResponse } =\n    useLocalStorage<IApiResponse | null>('auth_response', null);\n\n  const {\n    setValue: setSaveLogin,\n    value: getSavedLogin,\n    removeValue: removeSavedLogin,\n  } = useLocalStorage<ISavedLogin | null>('login_token', null);\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    isSavedLogin: true,\n    isLoggingIn: false,\n    isLoginFailed: false,\n  });\n\n  const { handleSubmit, control } = useForm<ILoginPayload>();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const handleLogin: SubmitHandler<ILoginPayload> = async (data) => {\n    if (\n      (data.username === undefined || data.password === undefined) &&\n      !getSavedLogin\n    ) {\n      messageApi.error({\n        type: 'error',\n        content: 'Username and password is required.',\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n    setState((prev) => ({\n      ...prev,\n      isLoggingIn: true,\n    }));\n\n    const payload: ILoginPayload = {\n      username: data.username,\n      password: data.password,\n    };\n\n    let loginResponse = null;\n\n    try {\n      if (getSavedLogin) {\n        loginResponse = await SwsyaClient.post<any, ILoginEncryptedPayload>(\n          API.ecryptedLogin,\n          {\n            content: getSavedLogin.token,\n          }\n        );\n      } else {\n        loginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.login,\n          payload\n        );\n      }\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n      messageApi.error({\n        type: 'error',\n        content: messages['500'].message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    if (loginResponse!.code === '00') {\n      if (state.isSavedLogin && !getSavedLogin) {\n        const encryptLoginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.ecryptLogin,\n          payload\n        );\n        setSaveLogin({\n          owner: encryptLoginResponse.data.data.owner,\n          token: encryptLoginResponse.data.data.token,\n        });\n      }\n      setAuthResponse({\n        code: loginResponse!.code,\n        message: loginResponse!.message,\n        token: loginResponse!.data,\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n\n      navigate('/a/dashboard', { replace: true });\n      return;\n    }\n\n    if (loginResponse!.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: loginResponse!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoggingIn: false,\n        isLoginFailed: true,\n      }));\n      handleClearLocalStorage(); // Clear saved data\n      return;\n    }\n  };\n\n  const handleSaveLogin = () => {\n    setState((prev) => ({ ...prev, isSavedLogin: !state.isSavedLogin }));\n  };\n\n  const handleClearSaveLogin = () => {\n    removeSavedLogin();\n  };\n\n  const handleClearLocalStorage = () => {\n    removeAuthResponse();\n    removeSavedLogin();\n  };\n\n  useEffect(() => {\n    document.title = 'Login | Swerte Saya';\n    removeAuthResponse(); // Remove existing token\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Row justify=\"center\">\n          <form onSubmit={handleSubmit(handleLogin)}>\n            <Card\n              title={`${\n                getSavedLogin\n                  ? `Welcome Back, ${getSavedLogin.owner}!`\n                  : 'Swerte Saya | Login'\n              }`}\n              bordered={true}\n              style={{ width: 280 }}\n            >\n              {getSavedLogin ? (\n                <div>\n                  Your presence is recognized. Would you like to proceed with\n                  signing in?\n                  <BtnSignIn\n                    title={\"Let's go!\"}\n                    isLoading={state.isLoggingIn}\n                  />\n                  <BtnNotYou\n                    event={() => handleClearSaveLogin()}\n                    title={getSavedLogin ? `Not ${getSavedLogin.owner}` : ''}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <LoginFormFields\n                    control={control}\n                    isLoginFailed={state.isLoginFailed}\n                  />\n                  <Checkbox\n                    onChange={() => handleSaveLogin()}\n                    style={{ marginTop: 20 }}\n                    checked={state.isSavedLogin}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <BtnSignIn isLoading={state.isLoggingIn} />\n                </div>\n              )}\n            </Card>\n          </form>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\records.page.tsx",["147"],[],{"ruleId":"148","severity":1,"message":"149","line":159,"column":6,"nodeType":"150","endLine":159,"endColumn":8,"suggestions":"151"},{"ruleId":"148","severity":1,"message":"152","line":291,"column":6,"nodeType":"150","endLine":291,"endColumn":8,"suggestions":"153"},{"ruleId":"148","severity":1,"message":"149","line":208,"column":6,"nodeType":"150","endLine":208,"endColumn":8,"suggestions":"154"},{"ruleId":"148","severity":1,"message":"149","line":227,"column":6,"nodeType":"150","endLine":227,"endColumn":8,"suggestions":"155"},{"ruleId":"148","severity":1,"message":"156","line":155,"column":6,"nodeType":"150","endLine":155,"endColumn":8,"suggestions":"157"},{"ruleId":"148","severity":1,"message":"158","line":299,"column":6,"nodeType":"150","endLine":299,"endColumn":8,"suggestions":"159"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initState'. Either include it or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has missing dependencies: 'initState' and 'labels'. Either include them or remove the dependency array.",["161"],["162"],["163"],"React Hook useEffect has a missing dependency: 'removeAuthResponse'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'initState', 'labels', and 'location?.state?.client?.name'. Either include them or remove the dependency array.",["165"],{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"166","fix":"170"},{"desc":"166","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [initState]",{"range":"176","text":"177"},"Update the dependencies array to be: [initState, labels]",{"range":"178","text":"179"},{"range":"180","text":"177"},{"range":"181","text":"177"},"Update the dependencies array to be: [removeAuthResponse]",{"range":"182","text":"183"},"Update the dependencies array to be: [initState, labels, location?.state?.client?.name]",{"range":"184","text":"185"},[4568,4570],"[initState]",[8554,8556],"[initState, labels]",[5881,5883],[6444,6446],[4104,4106],"[removeAuthResponse]",[9004,9006],"[initState, labels, location?.state?.client?.name]"]