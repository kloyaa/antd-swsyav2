[{"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx":"1","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx":"2","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx":"3","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx":"4","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx":"5","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts":"6","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts":"7","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts":"8","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts":"9","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts":"10","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts":"11","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts":"12","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx":"13","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx":"14","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx":"15","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx":"16","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx":"17","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx":"18","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts":"19","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts":"20","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts":"21","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts":"22","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts":"23","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx":"24","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts":"25","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx":"26","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\records.page.tsx":"27","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\const.ts":"28"},{"size":759,"mtime":1692793702372,"results":"29","hashOfConfig":"30"},{"size":1116,"mtime":1692793702386,"results":"31","hashOfConfig":"30"},{"size":2270,"mtime":1693066443146,"results":"32","hashOfConfig":"30"},{"size":1712,"mtime":1692877449843,"results":"33","hashOfConfig":"30"},{"size":880,"mtime":1692797856729,"results":"34","hashOfConfig":"30"},{"size":1389,"mtime":1693066278140,"results":"35","hashOfConfig":"30"},{"size":119,"mtime":1692793702641,"results":"36","hashOfConfig":"30"},{"size":1564,"mtime":1692793702650,"results":"37","hashOfConfig":"30"},{"size":160,"mtime":1692793702658,"results":"38","hashOfConfig":"30"},{"size":570,"mtime":1692793702663,"results":"39","hashOfConfig":"30"},{"size":139,"mtime":1692667859766,"results":"40","hashOfConfig":"30"},{"size":784,"mtime":1692793702672,"results":"41","hashOfConfig":"30"},{"size":1017,"mtime":1692876504831,"results":"42","hashOfConfig":"30"},{"size":5075,"mtime":1692793702518,"results":"43","hashOfConfig":"30"},{"size":13404,"mtime":1693066520307,"results":"44","hashOfConfig":"30"},{"size":6400,"mtime":1692795716848,"results":"45","hashOfConfig":"30"},{"size":6957,"mtime":1692876908318,"results":"46","hashOfConfig":"30"},{"size":5850,"mtime":1692793702627,"results":"47","hashOfConfig":"30"},{"size":101,"mtime":1692793702675,"results":"48","hashOfConfig":"30"},{"size":2720,"mtime":1692793702688,"results":"49","hashOfConfig":"30"},{"size":38,"mtime":1690980344162,"results":"50","hashOfConfig":"30"},{"size":244,"mtime":1692793702655,"results":"51","hashOfConfig":"30"},{"size":322,"mtime":1692793702692,"results":"52","hashOfConfig":"30"},{"size":5174,"mtime":1692876187310,"results":"53","hashOfConfig":"30"},{"size":140,"mtime":1692797056747,"results":"54","hashOfConfig":"30"},{"size":0,"mtime":1692868056438,"results":"55","hashOfConfig":"30"},{"size":12691,"mtime":1692884303655,"results":"56","hashOfConfig":"30"},{"size":216,"mtime":1693066214246,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"oqoa1y",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\btn-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\form-signin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\nav-admin.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\stats.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\table-transactions.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\api.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\messages.const.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\hooks\\useLocalstorage.hook.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\api.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\client.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\login.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\transaction.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\main.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\activity.page.tsx",["147"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport SwsyaClient from '../../utils/http-client.util';\nimport { API } from '../../const/api.const';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { Modal } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\nimport { IActivity } from '../../interfaces/activity.interface';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableActivityColumn } from '../../const/table.const';\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\ndayjs.locale('en'); // Set the locale to English\n\ninterface getTransactionsParams {\n  schedule?: string;\n  game?: string;\n  time?: string;\n}\n\ninterface IState {\n  txnTotal: number;\n  txnCount: number;\n  swtCount: number;\n  stlCount: number;\n  txnRevenue: number;\n  activities: IActivity[];\n  sessionExpired: boolean;\n  isVerifyingToken: boolean;\n  isFetchingActivities: boolean;\n}\n\nfunction Activity() {\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    txnTotal: 0,\n    txnCount: 0,\n    swtCount: 0,\n    stlCount: 0,\n    txnRevenue: 0,\n    activities: [],\n    sessionExpired: false,\n    isVerifyingToken: false,\n    isFetchingActivities: false,\n  });\n\n  const handleGetActivities = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingActivities: true,\n    }));\n\n    const getActivitiesResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, getTransactionsParams>(API.activities, {});\n\n    const transformedData = getActivitiesResp.data.map((item: IActivity) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n\n      return {\n        key: item._id,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-description': item.description,\n        'item-datetime': dayjs(item.createdAt).format('MMMM DD; h:mm A'),\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      activities: transformedData,\n      isFetchingActivities: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetActivities();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Activity | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableActivityColumn}\n            data={state.activities}\n            loading={state.isFetchingActivities}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Activity;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\dasbhoard.page.tsx",["148"],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\requests.page.tsx",["149"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { capitalizeName } from '../../utils/util';\nimport { tableRequestsColumn } from '../../const/table.const';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Requests() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: false });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'verify-account', label: 'Verify Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n            ]}\n          />\n        ),\n      };\n      // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Requests | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableRequestsColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Requests;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\users.page.tsx",["150"],[],"import { useEffect, useState } from 'react';\nimport NavigationBarAdmin from '../../components/nav-admin.component';\nimport TransactionTable from '../../components/table-transactions.component';\nimport { TxnTableContent } from '../../interfaces/transaction.interface';\nimport { IUser } from '../../interfaces/client.interface';\nimport SwsyaClient from '../../utils/http-client.util';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse } from '../../interfaces/api.interface';\nimport { API } from '../../const/api.const';\nimport { Button, Modal, Select, message } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { DownCircleOutlined } from '@ant-design/icons';\nimport { capitalizeName } from '../../utils/util';\nimport Paragraph from 'antd/es/typography/Paragraph';\nimport { tableUsersColumn } from '../../const/table.const';\nimport { EyeOutlined } from '@ant-design/icons';\n\ninterface IState {\n  users: TxnTableContent[];\n  isFetchingUsers: boolean;\n  isUpdatingStatus: boolean;\n  selectedId: string;\n}\n\ninterface IUpdateUserStatusPayload {\n  user: string;\n  verified: boolean;\n}\n\nfunction Users() {\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\n    'auth_response',\n    null\n  );\n\n  const navigate = useNavigate();\n  const [state, setState] = useState<IState>({\n    users: [],\n    isFetchingUsers: false,\n    isUpdatingStatus: false,\n    selectedId: '',\n  });\n\n  const handleChangeStatus = async (user: string, type: string) => {\n    let verificationStatus = true;\n\n    if (type === 'revoke-account') {\n      verificationStatus = false;\n    } else if (type === 'verify-account') {\n      verificationStatus = true;\n    }\n\n    const handleUpdateUserStatus = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).put<any, IUpdateUserStatusPayload>(API.updateUserStatus, {\n      user,\n      verified: verificationStatus,\n    });\n\n    if (handleUpdateUserStatus.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: handleUpdateUserStatus!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    messageApi.success({\n      type: 'success',\n      content: handleUpdateUserStatus!.message,\n      style: {\n        marginTop: '90vh',\n      },\n    });\n\n    await initState();\n  };\n\n  const handleGetUsers = async () => {\n    setState((prev) => ({\n      ...prev,\n      isFetchingUsers: true,\n    }));\n\n    const getUsersResp = await SwsyaClient.setAuthToken(\n      getAuthResponse!.token.data\n    ).get<any, any>(API.users, { verified: true });\n\n    const mappedData = getUsersResp.data.map((item: IUser) => {\n      const name = capitalizeName(\n        `${item.profile.firstName} ${item.profile.lastName}`\n      );\n      const contactNo = item.profile.contactNumber;\n      const address = capitalizeName(item.profile.address);\n      const email = item.email.toLowerCase();\n\n      return {\n        key: item._id,\n        'item-referrer': item.profile.refferedBy,\n        'item-name': (\n          <Paragraph\n            copyable={{ text: name }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {name}\n          </Paragraph>\n        ),\n        'item-username': item.username,\n        'item-contact': (\n          <Paragraph\n            copyable={{ text: contactNo }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {contactNo}\n          </Paragraph>\n        ),\n        'item-email': (\n          <Paragraph\n            copyable={{ text: email }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {email}\n          </Paragraph>\n        ),\n        'item-address': (\n          <Paragraph\n            copyable={{ text: address }}\n            style={{ padding: '0px', margin: '0px' }}\n          >\n            {address}\n          </Paragraph>\n        ),\n        'item-records': (\n          <Button\n            type=\"dashed\"\n            shape=\"default\"\n            icon={<EyeOutlined />}\n            size={'small'}\n            style={{ fontSize: \"12px\" }}\n            onClick={() => navigate(\"/a/users/record\", { state: {\n              client: { \n                user: item._id,\n                name\n              }\n            }})}\n          >\n            VIEW\n          </Button>\n        ),\n        'item-status': (\n          <Select\n            bordered={false}\n            suffixIcon={<DownCircleOutlined />}\n            defaultValue=\"action\"\n            onChange={(v) => handleChangeStatus(item.profile.user, v)}\n            style={{ width: '100%', textAlign: 'center' }}\n            options={[\n              { value: 'action', label: 'Select Action', disabled: true },\n              { value: 'revoke-account', label: 'Revoke Account' },\n              { value: 'hold-account', label: 'Hold', disabled: true },\n              { value: 'delete-account', label: 'Delete', disabled: true },\n            ]}\n          />\n        ),\n        // 'item-status': item.profile.verified ? 'Verified' : 'Not Verified',\n      };\n    });\n\n    setState((prev) => ({\n      ...prev,\n      users: mappedData,\n      isFetchingUsers: false,\n    }));\n  };\n\n  const handleVerifyToken = async (): Promise<boolean> => {\n    setState((prev) => ({\n      ...prev,\n      isVerifyingToken: true,\n    }));\n    if (getAuthResponse!.token) {\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\n        token: getAuthResponse!.token.data,\n      });\n      if (verifyToken.code !== '00') {\n        setState((prev) => ({\n          ...prev,\n          sessionExpired: true,\n        }));\n\n        Modal.error({\n          title: verifyToken.message,\n          content:\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\n          width: '400px',\n          centered: true,\n          onOk: () => navigate('/', { replace: true }),\n        });\n\n        return false;\n      }\n    }\n    setState((prev) => ({\n      ...prev,\n      false: true,\n    }));\n\n    return true;\n  };\n\n  const initState = async () => {\n    const authenticated = await handleVerifyToken();\n    if (authenticated) {\n      await handleGetUsers();\n    }\n  };\n\n  useEffect(() => {\n    document.title = 'Users | Swerte Saya';\n    initState();\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\n        <NavigationBarAdmin />\n        <div\n          style={{\n            marginTop: '100px',\n            marginLeft: '70px',\n            marginRight: '70px',\n          }}\n        >\n          <TransactionTable\n            columns={tableUsersColumn}\n            data={state.users}\n            loading={state.isFetchingUsers}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Users;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\login\\login.page.tsx",["151"],[],"import { Row, Checkbox, Card, message } from 'antd';\nimport SwsyaClient from '../../utils/http-client.util';\nimport {\n  ILoginEncryptedPayload,\n  ILoginPayload,\n} from '../../interfaces/login.interface';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useEffect, useState } from 'react';\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\nimport { IApiResponse, ISavedLogin } from '../../interfaces/api.interface';\nimport { messages } from '../../const/messages.const';\nimport { BtnNotYou, BtnSignIn } from '../../components/btn-signin.component';\nimport LoginFormFields from '../../components/form-signin.component';\nimport { useNavigate } from 'react-router-dom';\nimport { API } from '../../const/api.const';\n\nfunction Login() {\n  const { setValue: setAuthResponse, removeValue: removeAuthResponse } =\n    useLocalStorage<IApiResponse | null>('auth_response', null);\n\n  const {\n    setValue: setSaveLogin,\n    value: getSavedLogin,\n    removeValue: removeSavedLogin,\n  } = useLocalStorage<ISavedLogin | null>('login_token', null);\n\n  const navigate = useNavigate();\n  const [state, setState] = useState({\n    isSavedLogin: true,\n    isLoggingIn: false,\n    isLoginFailed: false,\n  });\n\n  const { handleSubmit, control } = useForm<ILoginPayload>();\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const handleLogin: SubmitHandler<ILoginPayload> = async (data) => {\n    if (\n      (data.username === undefined || data.password === undefined) &&\n      !getSavedLogin\n    ) {\n      messageApi.error({\n        type: 'error',\n        content: 'Username and password is required.',\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n    setState((prev) => ({\n      ...prev,\n      isLoggingIn: true,\n    }));\n\n    const payload: ILoginPayload = {\n      username: data.username,\n      password: data.password,\n    };\n\n    let loginResponse = null;\n\n    try {\n      if (getSavedLogin) {\n        loginResponse = await SwsyaClient.post<any, ILoginEncryptedPayload>(\n          API.ecryptedLogin,\n          {\n            content: getSavedLogin.token,\n          }\n        );\n      } else {\n        loginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.login,\n          payload\n        );\n      }\n    } catch (error) {\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n      messageApi.error({\n        type: 'error',\n        content: messages['500'].message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n\n      return;\n    }\n\n    if (loginResponse!.code === '00') {\n      if (state.isSavedLogin && !getSavedLogin) {\n        const encryptLoginResponse = await SwsyaClient.post<any, ILoginPayload>(\n          API.ecryptLogin,\n          payload\n        );\n        setSaveLogin({\n          owner: encryptLoginResponse.data.data.owner,\n          token: encryptLoginResponse.data.data.token,\n        });\n      }\n      setAuthResponse({\n        code: loginResponse!.code,\n        message: loginResponse!.message,\n        token: loginResponse!.data,\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoginFailed: false,\n        isLoggingIn: false,\n      }));\n\n      navigate('/a/dashboard', { replace: true });\n      return;\n    }\n\n    if (loginResponse!.code !== '00') {\n      messageApi.error({\n        type: 'error',\n        content: loginResponse!.message,\n        style: {\n          marginTop: '90vh',\n        },\n      });\n      setState((prev) => ({\n        ...prev,\n        isLoggingIn: false,\n        isLoginFailed: true,\n      }));\n      handleClearLocalStorage(); // Clear saved data\n      return;\n    }\n  };\n\n  const handleSaveLogin = () => {\n    setState((prev) => ({ ...prev, isSavedLogin: !state.isSavedLogin }));\n  };\n\n  const handleClearSaveLogin = () => {\n    removeSavedLogin();\n  };\n\n  const handleClearLocalStorage = () => {\n    removeAuthResponse();\n    removeSavedLogin();\n  };\n\n  useEffect(() => {\n    document.title = 'Login | Swerte Saya';\n    removeAuthResponse(); // Remove existing token\n  }, []);\n\n  return (\n    <>\n      {contextHolder}\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          minHeight: '100vh',\n        }}\n      >\n        <Row justify=\"center\">\n          <form onSubmit={handleSubmit(handleLogin)}>\n            <Card\n              title={`${\n                getSavedLogin\n                  ? `Welcome Back, ${getSavedLogin.owner}!`\n                  : 'Swerte Saya | Login'\n              }`}\n              bordered={true}\n              style={{ width: 280 }}\n            >\n              {getSavedLogin ? (\n                <div>\n                  Your presence is recognized. Would you like to proceed with\n                  signing in?\n                  <BtnSignIn\n                    title={\"Let's go!\"}\n                    isLoading={state.isLoggingIn}\n                  />\n                  <BtnNotYou\n                    event={() => handleClearSaveLogin()}\n                    title={getSavedLogin ? `Not ${getSavedLogin.owner}` : ''}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <LoginFormFields\n                    control={control}\n                    isLoginFailed={state.isLoginFailed}\n                  />\n                  <Checkbox\n                    onChange={() => handleSaveLogin()}\n                    style={{ marginTop: 20 }}\n                    checked={state.isSavedLogin}\n                  >\n                    Remember me\n                  </Checkbox>\n                  <BtnSignIn isLoading={state.isLoggingIn} />\n                </div>\n              )}\n            </Card>\n          </form>\n        </Row>\n      </div>\n    </>\n  );\n}\n\nexport default Login;\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\converter.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\http-client.util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\vite-env.d.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\activity.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\utils\\util.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\table.const.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\interfaces\\bet.interface.ts",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\components\\revenue-chart.component.tsx",[],[],"C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\pages\\dashboard\\records.page.tsx",["152"],[],"import { useEffect, useState } from 'react';\r\nimport NavigationBarAdmin from '../../components/nav-admin.component';\r\nimport TransactionTable from '../../components/table-transactions.component';\r\nimport Statistics from '../../components/stats.component';\r\nimport SwsyaClient from '../../utils/http-client.util';\r\nimport { API } from '../../const/api.const';\r\nimport { IApiResponse } from '../../interfaces/api.interface';\r\nimport useLocalStorage from '../../hooks/useLocalstorage.hook';\r\nimport { currency } from '../../utils/converter.util';\r\nimport {\r\n  IContentItem,\r\n  ITransaction,\r\n} from '../../interfaces/transaction.interface';\r\nimport { Button, DatePicker, DatePickerProps, Modal, Select, TimePicker, TimePickerProps } from 'antd';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Import the relativeTime plugin to display relative time\r\nimport 'dayjs/locale/en'; // Import the English locale to display month names in English\r\nimport Paragraph from 'antd/es/typography/Paragraph';\r\nimport { capitalizeName } from '../../utils/util';\r\nimport { tableDashboardColumn } from '../../const/table.const';\r\nimport { IDailyResult } from '../../interfaces/bet.interface';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { faker } from '@faker-js/faker';\r\nimport { DownCircleOutlined,  EyeOutlined, FilterOutlined } from '@ant-design/icons';\r\ndayjs.extend(relativeTime); // Extend Day.js with the relativeTime plugin\r\ndayjs.locale('en'); // Set the locale to English\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\ninterface IGetClientTransactionsParams {\r\n    schedule?: string;\r\n    game?: string;\r\n    user?: string;\r\n    time?: string;\r\n}\r\n\r\ninterface IState {\r\n  txnTotal: number;\r\n  txnCount: number;\r\n  swtCount: number;\r\n  stlCount: number;\r\n  txnRevenue: number;\r\n  transactions: ITransaction[];\r\n  dailyResults: IDailyResult[];\r\n  sessionExpired: boolean;\r\n  isVerifyingToken: boolean;\r\n  isFetchingTransactions: boolean;\r\n  isFetchingDailyResults: boolean;\r\n  schedule: string;\r\n  time: string;\r\n  isApplyingFilter: boolean;\r\n  gameType: \"3D\" | \"STL\"\r\n}\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nfunction PreviewRecords() {\r\n  const { value: getAuthResponse } = useLocalStorage<IApiResponse | null>(\r\n    'auth_response',\r\n    null\r\n  );\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const [state, setState] = useState<IState>({\r\n    txnTotal: 0,\r\n    txnCount: 0,\r\n    swtCount: 0,\r\n    stlCount: 0,\r\n    txnRevenue: 0,\r\n    transactions: [],\r\n    dailyResults: [],\r\n    sessionExpired: false,\r\n    isVerifyingToken: false,\r\n    isFetchingTransactions: false,\r\n    isFetchingDailyResults: false,\r\n    isApplyingFilter: false,\r\n    gameType: \"3D\",\r\n    schedule: \"\",\r\n    time: \"\"\r\n  });\r\n\r\n  const handleGetTransactions = async (gameType?: string, schedule?: string, time?: string) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      isFetchingTransactions: true,\r\n    }));\r\n\r\n    const apiParams: IGetClientTransactionsParams = {\r\n      user: location?.state?.client?.user,\r\n      game: gameType || \"3D\",\r\n      time: time || \"\"\r\n    };\r\n\r\n    if (schedule !== null && schedule !== \"\" && schedule != undefined) {\r\n      apiParams.schedule = schedule;\r\n    }\r\n\r\n    const getTransactionsResp = await SwsyaClient.setAuthToken(\r\n      getAuthResponse!.token.data\r\n    ).get<any, IGetClientTransactionsParams>(API.userTransactions, apiParams);\r\n\r\n    const name = capitalizeName(location?.state?.client?.name);\r\n    const transformedData = getTransactionsResp.data.map(\r\n      (item: ITransaction) => {\r\n   \r\n        const reference = item.reference;\r\n        const combination = item.content\r\n          .map(\r\n            (contentItem: IContentItem) =>\r\n              `${contentItem.type} ${contentItem.number}`\r\n          )\r\n          .join(', ');\r\n        const combinationElement = item.content.map(\r\n          (contentItem: IContentItem, index: number) => {\r\n            // return <h1>{contentItem.type} {contentItem.number}</h1>\r\n            const isRambled = contentItem.rambled;\r\n            return (\r\n              <div\r\n                key={index}\r\n                style={{\r\n                  fontWeight: 'bolder',\r\n                  marginRight: '10px',\r\n                  color: isRambled ? 'purple' : 'black',\r\n                }}\r\n              >\r\n                {contentItem.number}\r\n              </div>\r\n            );\r\n          }\r\n        );\r\n        return {\r\n          key: item._id,\r\n          'item-reference': (\r\n            <Paragraph\r\n              copyable={{ text: reference }}\r\n              style={{ padding: '0px', margin: '0px' }}\r\n            >\r\n              {reference}\r\n            </Paragraph>\r\n          ),\r\n          'item-game': item.game,\r\n          'item-teller': (\r\n            <Paragraph\r\n              copyable={{ text: name }}\r\n              style={{ padding: '0px', margin: '0px' }}\r\n            >\r\n              {name}\r\n            </Paragraph>\r\n          ),\r\n          'item-combination': (\r\n            <Paragraph\r\n              copyable={{ text: combination }}\r\n              style={{ display: 'flex', padding: '0px', margin: '0px' }}\r\n            >\r\n              {combinationElement}\r\n            </Paragraph>\r\n          ),\r\n          'item-time': item.time,\r\n          'item-schedule': dayjs(item.schedule).format('MMMM DD'),\r\n          'item-amount': currency.format(\r\n            item.content.reduce(\r\n              (total: any, contentItem: any) => total + contentItem.amount,\r\n              0\r\n            )\r\n          ),\r\n          'item-details': (\r\n            <Button\r\n              type=\"dashed\"\r\n              shape=\"default\"\r\n              icon={<EyeOutlined />}\r\n              size={'small'}\r\n              style={{ fontSize: \"12px\" }}\r\n            >\r\n              VIEW MORE DETAILS\r\n            </Button>\r\n          ),\r\n        };\r\n      }\r\n    );\r\n\r\n    setState((prev) => ({\r\n      ...prev,\r\n      txnRevenue: Number(getTransactionsResp.headers['swsya-txn-revenue']) || 0,\r\n      stlCount: Number(getTransactionsResp.headers['swsya-stl-count']) || 0,\r\n      swtCount: Number(getTransactionsResp.headers['swsya-swt-count']) || 0,\r\n      txnCount: Number(getTransactionsResp.headers['swsya-txn-count']) || 0,\r\n      txnTotal: Number(getTransactionsResp.headers['swsya-txn-total']) || 0,\r\n      transactions: transformedData,\r\n      isFetchingTransactions: false,\r\n    }));\r\n  };\r\n\r\n  const handleVerifyToken = async (): Promise<boolean> => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      isVerifyingToken: true,\r\n    }));\r\n    if (getAuthResponse!.token) {\r\n      const verifyToken = await SwsyaClient.post<any, any>(API.verifyToken, {\r\n        token: getAuthResponse!.token.data,\r\n      });\r\n      if (verifyToken.code !== '00') {\r\n        setState((prev) => ({\r\n          ...prev,\r\n          sessionExpired: true,\r\n        }));\r\n\r\n        Modal.error({\r\n          title: verifyToken.message,\r\n          content:\r\n            'Your current session has either timed out due to inactivity or has expired. To ensure the security of your account, please proceed to log in again. Thank you for your cooperation.',\r\n          width: '400px',\r\n          centered: true,\r\n          onOk: () => navigate('/', { replace: true }),\r\n        });\r\n\r\n        return false;\r\n      }\r\n    }\r\n    setState((prev) => ({\r\n      ...prev,\r\n      false: true,\r\n    }));\r\n\r\n    return true;\r\n  };\r\n\r\n  const handleChangeGameType = async (type: string) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      gameType: type as any,\r\n    }));\r\n  };\r\n\r\n  const handleChangeDate: DatePickerProps['onChange'] = async (_, dateString: any) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      schedule: dateString\r\n    }));\r\n  };\r\n\r\n  const handleChangeTime: TimePickerProps['onChange'] = async (_, time: any) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      time\r\n    }));\r\n  };\r\n\r\n  const handleApplyFilter = async (gameType: string, schedule: string, time: string) => {\r\n    console.log(gameType, schedule, time)\r\n    setState((prev) => ({\r\n      ...prev,\r\n      isApplyingFilter: true,\r\n    }));\r\n    await handleGetTransactions(gameType, schedule, time);\r\n    setState((prev) => ({\r\n      ...prev,\r\n      isApplyingFilter: false,\r\n    }));\r\n  }\r\n\r\n  const initState = async () => {\r\n    const authenticated = await handleVerifyToken();\r\n    if (authenticated) {\r\n      await handleGetTransactions();\r\n    }\r\n  };\r\n\r\n  const labels = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Revenue',\r\n        data: labels.map(() => faker.number.int({ min: 0, max: 55000 })),\r\n        borderColor: 'rgb(255, 99, 132)',\r\n        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = `${location?.state?.client?.name} | Swerte Saya`;\r\n    initState();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ background: '#f9f9f9', height: '100vh' }}>\r\n        <NavigationBarAdmin />\r\n        <div\r\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px' }}\r\n        >\r\n          <Statistics\r\n            txnRevenue={state.txnRevenue}\r\n            stlCount={state.stlCount}\r\n            swtTotal={state.swtCount}\r\n            txnCount={state.txnCount}\r\n            txnTotal={state.txnTotal}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{ marginTop: '20px', marginLeft: '70px', marginRight: '70px' }}\r\n        >\r\n            <div style={{ backgroundColor: \"white\", borderRadius: \"20px\", border: \"0.5px solid #f5f5f5\" }}>\r\n                <Line options={{\r\n                    responsive: true,\r\n                    layout: {\r\n                    padding: {\r\n                        left: 20, \r\n                        right: 20,\r\n                        bottom: 10,\r\n                        top: 10\r\n                    },\r\n                    },\r\n                    animations: {\r\n                    tension: {\r\n                        duration: 1000,\r\n                        easing: 'linear',\r\n                        from: 1,\r\n                        to: 0,\r\n                        loop: true\r\n                    }\r\n                    },\r\n                    plugins: {\r\n                    legend: {\r\n                        position: 'top' as const,\r\n                    },\r\n                    },\r\n                }} \r\n                data={data}  \r\n                height={\"70vh\"}/>\r\n            </div>\r\n            <div style={{ marginTop: \"20px\", display: \"flex\", flexDirection: \"column\", gap: \"10px\" }}>\r\n              <div style={{  display: \"flex\", gap: \"10px\" }}>\r\n                <div style={{ width: \"50%\"}}>\r\n                  <Select\r\n                      suffixIcon={<DownCircleOutlined />}\r\n                      defaultValue=\"3D\"\r\n                      onChange={(v) => handleChangeGameType(v)}\r\n                      style={{ width: '100%', textAlign: 'center' }}\r\n                      options={[\r\n                        { value: '3D', label: '3D' },\r\n                        { value: 'STL', label: 'STL'},\r\n                      ]}\r\n                    />\r\n                </div>\r\n                <DatePicker onChange={handleChangeDate} style={{ width: \"25%\"}}/>\r\n                <TimePicker \r\n                  onChange={(v, t) => { handleChangeTime(v, t) }} \r\n                  showSecond={false} \r\n                  format={\"h:mm A\"}\r\n                  style={{ width: \"25%\"}}/>\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"default\"\r\n                  icon={<FilterOutlined />}\r\n                  size={'middle'}\r\n                  loading={state.isApplyingFilter}\r\n                  onClick={() => handleApplyFilter(state.gameType, state.schedule, state.time)}\r\n                >\r\n                  APPLY FILTER\r\n                </Button>\r\n              </div>\r\n              \r\n              <TransactionTable\r\n                columns={tableDashboardColumn}\r\n                data={state.transactions}\r\n                loading={state.isFetchingTransactions}\r\n                caption={`Transactions of ${location.state.client.name}`}\r\n              />\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PreviewRecords;\r\n","C:\\Users\\KOALA\\Documents\\Me\\Repositories\\vr-swsya\\src\\const\\const.ts",[],[],{"ruleId":"153","severity":1,"message":"154","line":159,"column":6,"nodeType":"155","endLine":159,"endColumn":8,"suggestions":"156"},{"ruleId":"153","severity":1,"message":"157","line":321,"column":6,"nodeType":"155","endLine":321,"endColumn":8,"suggestions":"158"},{"ruleId":"153","severity":1,"message":"154","line":208,"column":6,"nodeType":"155","endLine":208,"endColumn":8,"suggestions":"159"},{"ruleId":"153","severity":1,"message":"154","line":227,"column":6,"nodeType":"155","endLine":227,"endColumn":8,"suggestions":"160"},{"ruleId":"153","severity":1,"message":"161","line":155,"column":6,"nodeType":"155","endLine":155,"endColumn":8,"suggestions":"162"},{"ruleId":"153","severity":1,"message":"163","line":309,"column":6,"nodeType":"155","endLine":309,"endColumn":8,"suggestions":"164"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'initState'. Either include it or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has missing dependencies: 'initState' and 'labels'. Either include them or remove the dependency array.",["166"],["167"],["168"],"React Hook useEffect has a missing dependency: 'removeAuthResponse'. Either include it or remove the dependency array.",["169"],"React Hook useEffect has missing dependencies: 'initState' and 'location?.state?.client?.name'. Either include them or remove the dependency array.",["170"],{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"171","fix":"175"},{"desc":"171","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [initState]",{"range":"181","text":"182"},"Update the dependencies array to be: [initState, labels]",{"range":"183","text":"184"},{"range":"185","text":"182"},{"range":"186","text":"182"},"Update the dependencies array to be: [removeAuthResponse]",{"range":"187","text":"188"},"Update the dependencies array to be: [initState, location?.state?.client?.name]",{"range":"189","text":"190"},[4568,4570],"[initState]",[9540,9542],"[initState, labels]",[5881,5883],[6444,6446],[4104,4106],"[removeAuthResponse]",[9286,9288],"[initState, location?.state?.client?.name]"]